# Procedure to parse a string as a hexadecimal number. The resulting number is
# stored in parseHex.n
#
procedure parseHex: .arg$
   # Normalize hexadecimal string: no leading hash, lowercase.
   .hex$ = replace$ (.arg$, "#", "", 0)
   .hex$ = replace_regex$ (.hex$, "(.)", "\L\1", 0)

   if index_regex (.hex$, "[^0-9abcdef]")
      .n = undefined
      appendInfoLine: "Not a hexadecimal number: ", .hex$
   else
      .len = length(.hex$)
      .n = 0

      for .j from 0 to .len-1
         .i = .len - .j
         .c$ = mid$(.hex$, .i, 1)

         .ix = index("abcdefg", .c$)
         .value = if .ix then 9 + .ix else number (.c$) fi

         .n += .value * (16 ^ .j)
      endfor
   endif
endproc
