# Written by: Mauricio Figueroa (www.mauriciofigueroa.cl)
# v.0.2 - 15th July 2014
# 
# Also contributed: JJ Atria (www.pinguinorodriguez.cl)
# 
# This script is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# A copy of the GNU General Public License is available at 
# <http://www.gnu.org/licenses/>.

# Procedure to convert hexadecimal colours (with or without initial hash) into
# RGB colour codes (integers in the range 0 - 255). Input is the number as a
# string (e.g. "#9bcfab").
# 
# The three components are stored in the local variables ".r", ".g" and ".b" for
# the red, green and blue respectively. These variables can be used outside the
# procedure via: "hex2rgb.r".
#
procedure hex2rgb (.hex$)
  # Removing hash symbol, convert to lowercase, look for illegal characters and
  # query length of hexadecimal.
  .hex$ = replace$ (.hex$, "#", "", 0)
  .hex$ = replace_regex$ (.hex$, "(.)", "\L\1", 0)
  .has_illegal = index_regex (.hex$, "[^0-9abcdef]")
  .length = length (.hex$)
  
  # If problem is found from previous tests, terminate script.
  if .has_illegal
    .bad_char$ = mid$ (.hex$, .has_illegal, 1)
    exitScript: "Your hexadecimal number ('.hex$') contains an illegal
      ... character ('.bad_char$') in position: '.has_illegal'.'newline$'"
  elsif .length <> 6
    exitScript: "Your hexadecimal number ('.hex$') has '.length' characters
      ... instead of the required 6.'newline$'"
  endif
  
  # Parsing hexadecimal string.
  for .ch to 6
    .current$ = mid$ (.hex$, .ch, 1)
    
    # Convert hexadecimal characters to decimals.
    .ix = index("abcdefg", .current$)
    .value = if .ix then 9 + .ix else number (.current$) fi
    
    # Converting each digit of the pairs of numbers to decimal by using:
    # decimal * (16 ^ position). If the hexadecimal number is "F73", then the
    # calculations would be: (15 * (16 ^ 2)) + (7 * (16 ^ 1)) + (3 * (16 ^ 0)).
    # Notice that the hexadecimal colour contains 6 characters, but the three
    # encoded colours come in pairs of 2. The values obtained are stored in a
    # numerical array.
    .prov_dec [.ch] = .value * (16 ^ (.ch mod 2))
  endfor

  # Adding decimal values for each pair to convert to RGB.
  .r = (.prov_dec [1] + .prov_dec [2])
  .g = (.prov_dec [3] + .prov_dec [4])
  .b = (.prov_dec [5] + .prov_dec [6])
endproc

# Procedure to convert colours in RGB format (integers in the range 0 - 255) to
# the colour format expected by Praat. Input is the three RGB components, in
# the order suggested by the acronym (e.g. red, green, blue).
#
# The colour in the format required by Praat can be accessed with a reference to
# ".color$", which can be used in any(?) of the commands that use colours. For
# example, to change the colour of the pen in a Praat draw, you can use:
#
#     Colour: rgb2praat.color$
# 
procedure rgb2praat (.r, .g, .b)
  # Testing number format.
  if .r < 0 or .r > 255 or .g < 0 or .g > 255 or .b < 0 or .b > 255
    exitScript: "One of the values provided to rgb2praat (red: '.r', green: '.g', blue: '.b')
      ... is either smaller than 0 or larger than 255.'newline$'"
  endif

  # Convert original RGB to Praat's RGB colour format.
  .r = .r / 255
  .g = .g / 255
  .b = .b / 255
  .color$ = "{" + string$(.r) + "," + string$(.g) + "," + string$(.b) + "}"
endproc

# Procedure to convert hexadecimal colours (with or without initial hash) into
# the colour format expected by Praat. Input is the number as a string
# (eg. "#9bcfab").
# 
# The colour in the format required by Praat can be accessed with a reference to
# ".color$", which can be used in any(?) of the commands that use colours. For
# example, to change the colour of the pen in a Praat draw, you can use:
#
#     Colour: hex2praat.color$
#
procedure hex2praat (.hex$)
  @hex2rgb(.hex$)
  @rgb2praat(hex2rgb.r, hex2rgb.g, hex2rgb.b)
  .r = rgb2praat.r
  .g = rgb2praat.g
  .b = rgb2praat.b
  .color$ = rgb2praat.color$
endproc
