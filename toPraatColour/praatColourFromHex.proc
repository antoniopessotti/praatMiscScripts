# Written by Mauricio Figueroa (www.mauriciofigueroa.cl)
# v.0.1 - 14th July 2014
# 
# Procedure to convert hexadecimal colours (with or without initial hash) into
# RGB and then into Praat RGB-formatted colours. The input variable has to be
# provided as a string variable between quotation marks, unless a previous
# string variable has been assigned.
# 
# The output corresponds to three local variables containing Praat-formatted RGB
# colours: ".r", ".g" and ".b". These variables can be used outside the
# procedure via: "hex2rgb.r".
#
# The color in the format required by praat can be accessed with a reference to
# ".rgb$", which can be used in any(?) of the commands that use colors. For
# example, to change the colour of the pen in a Praat draw, you can use:
#
#   Colour: hex2rgb.rgb$
#
# This script is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# A copy of the GNU General Public License is available at 
# <http://www.gnu.org/licenses/>.

procedure hex2rgb (.hex$)
  
  # Removing hash symbol, look for illegal characters and query length of
  # hexadecimal.
  .hex$ = replace$ (.hex$, "#", "", 0)
  .hex$ = replace_regex$ (.hex$, "(.)", "\L\1", 0)
  .has_illegal = index_regex (.hex$, "[^0-9abcdef]")
  .length = length (.hex$)
  
  # If problem is found from previous tests, terminate script.
  if .has_illegal
    .bad_char$ = mid$ (.hex$, .has_illegal, 1)
    exitScript: "Your hexadecimal number ('.hex$') contains an illegal
      ... character ('.bad_char$') in position: '.has_illegal'.'newline$'"
  elsif .length != 6
    exitScript: "Your hexadecimal number ('.hex$') has '.length' characters
      ... instead of the required 6.'newline$'"
  endif
  
  # Parsing hexadecimal string.
  for .ch to 6
    .current$ = mid$ (.hex$, .ch, 1)
    
    # Convert hexadecimal characters to decimals.
    .ix = index("abcdfg", .current$)
    .value = if .ix then 9 + .ix else number (.current$) fi
    
    # Converting each digit of the pairs of numbers to decimal by using:
    # decimal * (16 ^ position). If the hexadecimal number is "F73", then the
    # calculations would be: (15 * (16 ^ 2)) + (7 * (16 ^ 1)) + (3 * (16 ^ 0)).
    # Notice that the hexadecimal colour contains 6 characters, but the three
    # encoded colours come in pairs of 2. The values obtained are stored in a
    # numerical array.
    .prov_dec [.ch] = .value * (16 ^ (.ch mod 2))
  endfor

  # Adding decimal values for each pair to convert to RGB.
  .r = (.prov_dec [1] + .prov_dec [2]) / 255
  .g = (.prov_dec [3] + .prov_dec [4]) / 255
  .b = (.prov_dec [5] + .prov_dec [6]) / 255
  .rgb$ = "{" + string$(.r) + "," + string$(.g) + "," + string$(.b) + "}"

endproc
